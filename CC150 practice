# 1.1 string with unique characters, no additional data structure
def Unique(aString):
    i=0
    for w in aString:
        if i<len(aString)-1:
            i+=1
            for v in aString[i:]:
                if aString[i-1]==v:
                    return False
    return True
    

#1.2 One string is permutation of another string
def Permutation(string1, string2):
    first=string1.lower()
    second=string2.lower()
    if first==second:
        return False
    if len(first)!=len(second):
        return False
    while len(first)==len(second) and len(first)>0:
        for w in first:
            first=first.replace(w,'')
            second=second.replace(w,'')
    if len(first)==len(second):
        return True
    else:
        return False
        
        
#1.3 use '20%' to replace space in a string
def Replace_space(aString):
    new_string=''
    i=0
    temp=aString.split()
    for w in temp:
        if i<len(temp)-1:
            new_string=new_string+w+'20%'
        if i==len(temp)-1:
            new_string=new_string+w
        i+=1
    return new_string
    
    
#1.4 Palindrome permutation check
def palinCheck(aString):
    new_string=aString.lower().replace(' ', '')
    i=0
    for w in new_string:
        if new_string.count(w)%2!=0:
            i+=1
        new_string.replace(w,'')
    return i<2

#1.5 one edit away

def one_edit_away(s1,s2):
    i1=0
    i2=0
    j1=0
    j2=0
    k1=0
    k2=0
    if len(s1)==len(s2):
        for w in s1:
            if s1[i1]==s2[i1]:
                i1+=1
                i2+=1
            else:
                i1+=1       
    elif len(s1)==len(s2)-1:
        for w in s2:
            if s1[j1]==s2[j2]:
                j1+=1
                j2+=1
            else:
                j2+=1 # if and only if one insert, final j1 == j2 - 1, 
    elif len(s1)==len(s2)+1: 
        for w in s1:
            if s1[k1]==s2[k2]:
                k1+=1
                k2+=1
            else:
                k1+=1 # if and only if one removal, final k1 == k2 + 1,           
    else:
        return False
    
    return i1== i2+1 or j1 ==j2-1 or k1 == k2 +1


        
